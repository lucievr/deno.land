import { Router } from "https://deno.land/x/oak/mod.ts";
import { ObjectId } from "https://deno.land/x/mongo@v0.8.0/mod.ts";

import { getDb } from "../helpers/db_client.ts";

const router = new Router();

interface Todo {
  id?: string; // option, will be generated by mongo
  text: string;
}

router.get("/todos", async (ctx) => {
  const todos = await getDb().collection("todos").find(); // { _id: ObjectId(), text: '' }
  const transformedTodos = todos.map(
    (todo: { _id: ObjectId; text: string }) => {
      return { id: todo._id.$oid, text: todo.text }; // oid = property provided by mongo, id as a string not ObjectId
    },
  );
  ctx.response.body = { todos: transformedTodos }; // oaks assumes it should be a json and will parse it
});

router.post("/todos", async (ctx) => {
  // if request headers with json, oak will automatically parse the body from json, body is a promise
  const data = await ctx.request.body();
  const newTodo: Todo = {
    text: data.value.text, // value is the parsed object, contains text property
  };

  const id = await getDb().collection("todos").insertOne(newTodo);

  newTodo.id = id.$oid;

  ctx.response.body = { message: "Created todo", todo: newTodo };
});

router.put("/todos/:todoId", async (ctx) => {
  const tid = ctx.params.todoId!; // \!\ to make it clear this will never be undefined
  const data = await ctx.request.body();

  await getDb().collection("todos").updateOne(
    { _id: ObjectId(tid) },
    { $set: { text: data.value.text } },
  );

  ctx.response.body = { message: "Updated todo" };
});

router.delete("/todos/:todoId", async (ctx) => {
  const tid = ctx.params.todoId!;

  await getDb().collection("todos").deleteOne({ _id: ObjectId(tid) });

  ctx.response.body = { message: "Deleted todo" };
});

export default router;
